### 单例模式
- 意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
- 主要解决：一个全局使用的类频繁地创建与销毁。
- 何时使用：当您想控制实例数目，节省系统资源的时候。
- 使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。

### 工厂模式
- 何时使用：我们明确地计划不同条件下创建不同实例时。
- 使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。

### 抽象工厂模式
- 工厂模式的工厂模式
- 何时使用：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。
- 使用场景：1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。


### 建造者模式
- 对象的组合模式
- 一步一步，创建想要的对象
- 何时使用：一些基本部件不会变，而其组合经常变化的时候。
- 使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。

```
public class MealBuilder {
 
   public Meal prepareVegMeal (){
      Meal meal = new Meal();
      meal.addItem(new VegBurger());
      meal.addItem(new Coke());
      return meal;
   }   
 
   public Meal prepareNonVegMeal (){
      Meal meal = new Meal();
      meal.addItem(new ChickenBurger());
      meal.addItem(new Pepsi());
      return meal;
   }
}
```

### 原型模式


